name: OpenWrt构建


on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_SCRIPT: diy.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: UTC
  CACHE_KEY: ${{ runner.os }}-openwrt-${{ hashFiles('**/.hash') }}
  DEVICE_NAME: ${{ github.event.client_payload.device_name || 'Generic' }}
  FILE_DATE: ${{ github.event.client_payload.file_date || format_date('yyyyMMdd') }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 缓存OpenWrt和下载目录
      uses: actions/cache@v3
      with:
        path: |
          ./openwrt
          ./openwrt/dl
        key: ${{ env.CACHE_KEY }}
        restore-keys: |
          ${{ runner.os }}-openwrt-

    - name: 条件性移除不必要文件
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true

    - name: 安装依赖
      run: |
        DEBIAN_FRONTEND=noninteractive sudo apt update && sudo apt full-upgrade -y && \
        sudo apt install -y $(tr ' ' '\n' <<< "ack antlr3 asciidoc autoconf ... zlib1g-dev") && \
        sudo apt-get -qq autoremove --purge && \
        sudo apt-get -qq clean

    - name: 设置时区
      run: |
        sudo timedatectl set-timezone "$TZ"

    - name: 克隆源代码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt

    - name: 加载自定义提要和配置
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        [ -e $DIY_SCRIPT ] && chmod +x $DIY_SCRIPT && ./$DIY_SCRIPT
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

    - name: 更新和安装提要
      run: |
        cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: 编译固件
      run: |
        cd openwrt && make defconfig && make download -j8 && make -j$(nproc)

    - name: 检查空间使用情况
      if: always()
      run: df -hT

    - name: 清理旧的工作流和发布
      if: always()
      run: |
        # 清理旧的工作流运行，保留最新的两个
        gh api -X DELETE /repos/{owner}/{repo}/actions/runs/{run_id} \
          --header "authorization: token ${{ secrets.REPO_TOKEN }}" \
          --jq '. | select(.id != (. | map(select(.status == "completed")) | .[] | .id) | unique)' \
          | xargs -I{} gh api -X DELETE /repos/{owner}/{repo}/actions/runs/{}

        # 清理旧的发布，保留最新的三个
        gh api /repos/{owner}/{repo}/releases -q '.[] | select(.created_at < "1970-01-01T00:00:01Z")' \
          | xargs -I{} gh api -X DELETE /repos/{owner}/{repo}/releases/{}

    - name: 上传固件
      if: env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        mkdir -p firmware
        mv * firmware/
        echo "FIRMWARE_PATH=$PWD/firmware" >> $GITHUB_ENV

    - name: 生成发布标签并上传固件
      if: env.UPLOAD_RELEASE == 'true'
      run: |
        gh release create "OpenWrt_${DEVICE_NAME}_${FILE_DATE}" -F ${{ env.FIRMWARE_PATH }}/* -t "OpenWrt ${DEVICE_NAME} Firmware ${FILE_DATE}"

    - name: Check final status
      run: | 
        echo "Final status: ${{ job.status }}"
