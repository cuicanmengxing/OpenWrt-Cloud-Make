name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: UTC  # 使用UTC时间

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Cache OpenWrt and dl
      uses: actions/cache@v3
      with:
        path: |
          ./openwrt
          ./openwrt/dl
        key: ${{ runner.os }}-openwrt-${{ hashFiles('**/.github/workflows/openwrt-builder.yml') }}

    - name: Conditionally remove unnecessary files
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true

    - name: Install dependencies
      run: |
        sudo apt update && sudo apt full-upgrade -y && sudo apt install -y $(tr ' ' '\n' <<< "ack antlr3 asciidoc autoconf ... zlib1g-dev")
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update and install feeds
      run: |
        cd openwrt && ./scripts/feeds update -a
        cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package and compile
      id: package_and_compile
      run: |
        cd openwrt
        make defconfig
        make download -j8
        make -j$(nproc) || { echo "Compilation failed"; exit 1; }
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: always()
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.package_and_compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize and upload firmware
      id: organize_and_upload_firmware
      if: steps.package_and_compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        mkdir -p firmware
        mv * firmware/
        echo "FIRMWARE_PATH=$PWD/firmware" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize_and_upload_firmware.outputs.status == 'success'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Generate release tag and upload
      id: generate_release
      if: steps.package_and_compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "RELEASE_TAG=OpenWrt_${DEVICE_NAME}_${FILE_DATE}" >> $GITHUB_ENV
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "GoFile URL: ${{ steps.gofile.outputs.url }}" >> release_notes.md
        cat <<EOF >> release_notes.md
        ## Firmware Information
        - **Device**: ${DEVICE_NAME}
        - **Compile Date**: ${FILE_DATE}
        - **Default IP**: 192.168.1.1
        - **Default Password**: password
        EOF
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.generate_release.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: release_notes.md
        files: ${{ env.FIRMWARE_PATH }}/*

    - name: Delete workflow runs and remove old releases
      if: always()
      run: |
        # Delete workflow runs older than 1 day except for the last 2
        # Remove old releases older than 3, and delete tags
        echo "Cleaning up old workflow runs and releases"
        # Add the actual commands to perform the cleanup here

    - name: Check final status
      run: |
        echo "Final status: ${{ job.status }}"
